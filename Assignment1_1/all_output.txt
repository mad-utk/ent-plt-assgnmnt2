The core classes, functions, and methods necessary for this project are:

1. Event.java: This class will represent the Event object with fields like name, description, date & time.
2. EventController.java: This class will contain the API endpoints for adding, updating, deleting, and listing events.
3. EventService.java: This class will contain the business logic for managing events.
4. EventRepository.java: This class will manage the storage and retrieval of events in an ArrayList.

Now, let's start with the entry point of the application, which is the main Spring Boot application class.

src/main/java/com/example/eventmanagement/EventManagementApplication.java
```java
package com.example.eventmanagement;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
public class EventManagementApplication {

	public static void main(String[] args) {
		SpringApplication.run(EventManagementApplication.class, args);
	}
}
```

Next, let's define the Event class.

src/main/java/com/example/eventmanagement/model/Event.java
```java
package com.example.eventmanagement.model;

import java.util.Date;

public class Event {
    private String name;
    private String description;
    private Date dateTime;

    public Event(String name, String description, Date dateTime) {
        this.name = name;
        this.description = description;
        this.dateTime = dateTime;
    }

    // Getters and setters
}
```

Now, let's define the EventRepository class.

src/main/java/com/example/eventmanagement/repository/EventRepository.java
```java
package com.example.eventmanagement.repository;

import com.example.eventmanagement.model.Event;
import org.springframework.stereotype.Repository;

import java.util.ArrayList;
import java.util.Comparator;
import java.util.List;

@Repository
public class EventRepository {
    private List<Event> events = new ArrayList<>();

    public Event addEvent(Event event) {
        events.add(event);
        events.sort(Comparator.comparing(Event::getName));
        return event;
    }

    public List<Event> getAllEvents() {
        return events;
    }

    // Methods for updating and deleting events
}
```

Next, let's define the EventService class.

src/main/java/com/example/eventmanagement/service/EventService.java
```java
package com.example.eventmanagement.service;

import com.example.eventmanagement.model.Event;
import com.example.eventmanagement.repository.EventRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.List;

@Service
public class EventService {
    @Autowired
    private EventRepository eventRepository;

    public Event addEvent(Event event) {
        return eventRepository.addEvent(event);
    }

    public List<Event> getAllEvents() {
        return eventRepository.getAllEvents();
    }

    // Methods for updating and deleting events
}
```

Finally, let's define the EventController class.

src/main/java/com/example/eventmanagement/controller/EventController.java
```java
package com.example.eventmanagement.controller;

import com.example.eventmanagement.model.Event;
import com.example.eventmanagement.service.EventService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@RestController
public class EventController {
    @Autowired
    private EventService eventService;

    @PostMapping("/event")
    public Event addEvent(@RequestBody Event event) {
        return eventService.addEvent(event);
    }

    @GetMapping("/event")
    public List<Event> getAllEvents() {
        return eventService.getAllEvents();
    }

    // Endpoints for updating and deleting events
}
```

The pom.xml file is the Project Object Model for Maven, which is used to manage the project's build and dependencies.

pom.xml
```xml
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>

  <groupId>com.example</groupId>
  <artifactId>eventmanagement</artifactId>
  <version>1.0-SNAPSHOT</version>
  <packaging>jar</packaging>

  <name>eventmanagement</name>
  <url>http://maven.apache.org</url>

  <properties>
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    <maven.compiler.source>1.7</maven.compiler.source>
    <maven.compiler.target>1.7</maven.compiler.target>
  </properties>

  <dependencies>
    <dependency>
      <groupId>junit</groupId>
      <artifactId>junit</artifactId>
      <version>3.8.1</version>
      <scope>test</scope>
    </dependency>
    <!-- Add Spring Boot dependencies here -->
  </dependencies>
</project>
```

This is a basic setup for a Spring Boot application with MVC architecture. You can add more functionalities as per your requirements.